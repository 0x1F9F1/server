# Test different foreign keys and force galera foreign key
# append error.

--source include/galera_cluster.inc
--source include/have_debug.inc

--connection node_1

call mtr.add_suppression("WSREP: Appending cascaded fk row key failed:.*");

CREATE TABLE grandparent (
    id INT NOT NULL PRIMARY KEY
) ENGINE=InnoDB;

CREATE TABLE parent (
    id INT NOT NULL PRIMARY KEY,
    grandparent_id INT,
    FOREIGN KEY (grandparent_id)
        REFERENCES grandparent(id)
        ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

CREATE TABLE child (
    id INT NOT NULL PRIMARY KEY, 
    parent_id INT,
    FOREIGN KEY (parent_id) 
        REFERENCES parent(id)
        ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

INSERT INTO grandparent VALUES (1),(2);
SET GLOBAL debug_dbug = "+d,wsrep_append_foreign_key_error";
--error ER_NO_REFERENCED_ROW_2
INSERT INTO parent VALUES (1,1), (2,2);
SET GLOBAL debug_dbug = "";
INSERT INTO parent VALUES (1,1), (2,2);
SET GLOBAL debug_dbug = "+d,wsrep_append_foreign_key_error";
--error ER_NO_REFERENCED_ROW_2
INSERT INTO child VALUES (1,1), (2,2);
SET GLOBAL debug_dbug = "";
INSERT INTO child VALUES (1,1), (2,2);

--connection node_2
DELETE FROM grandparent WHERE id = 1;
UPDATE grandparent SET id = 5 where id = 2;

--connection node_1
select * from child;
select * from parent;
select * from grandparent;

--connection node_2
select * from child;
select * from parent;
select * from grandparent;

drop table child, parent, grandparent;

--connection node_1

CREATE TABLE grandparent (
    id INT NOT NULL PRIMARY KEY
) ENGINE=InnoDB;

CREATE TABLE parent (
    id INT NOT NULL,
    id2 INT NOT NULL,
    grandparent_id INT,
    id3 INT not null,
    id4 INT,
    id5 INT,
    PRIMARY KEY(id,id2),
    unique key(id3),
    key(id4,id5),
    key(id4,id),
    FOREIGN KEY (grandparent_id)
        REFERENCES grandparent(id)
        ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

CREATE TABLE child (
    id INT NOT NULL PRIMARY KEY, 
    parent_id INT,
    FOREIGN KEY (parent_id) 
        REFERENCES parent(id)
        ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

CREATE TABLE child2 (
    id INT NOT NULL PRIMARY KEY, 
    parent_id INT,
    FOREIGN KEY (parent_id) 
        REFERENCES parent(id3)
        ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

CREATE TABLE child3 (
    id INT NOT NULL PRIMARY KEY, 
    parent_id INT,
    FOREIGN KEY (parent_id) 
        REFERENCES parent(id4)
        ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

CREATE TABLE child4 (
    id INT NOT NULL PRIMARY KEY, 
    pid1 INT,
    pid2 INT,
    FOREIGN KEY (pid1,pid2) 
        REFERENCES parent(id4,id)
        ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

INSERT INTO grandparent VALUES (1),(2);
SET GLOBAL debug_dbug = "+d,wsrep_append_foreign_key_error";
--error ER_NO_REFERENCED_ROW_2
INSERT INTO parent VALUES (1,1,1,1,1,1), (2,2,2,2,2,2);
SET GLOBAL debug_dbug = "";
INSERT INTO parent VALUES (1,1,1,1,1,1), (2,2,2,2,2,2);
SET GLOBAL debug_dbug = "+d,wsrep_append_foreign_key_error";
--error ER_NO_REFERENCED_ROW_2
INSERT INTO child VALUES (1,1), (2,2);
SET GLOBAL debug_dbug = "";
INSERT INTO child VALUES (1,1), (2,2);
SET GLOBAL debug_dbug = "+d,wsrep_append_foreign_key_error";
--error ER_NO_REFERENCED_ROW_2
INSERT INTO child2 VALUES (1,1), (2,2);
SET GLOBAL debug_dbug = "";
INSERT INTO child2 VALUES (1,1), (2,2);
SET GLOBAL debug_dbug = "+d,wsrep_append_foreign_key_error";
--error ER_NO_REFERENCED_ROW_2
INSERT INTO child3 VALUES (1,1), (2,2);
SET GLOBAL debug_dbug = "";
INSERT INTO child3 VALUES (1,1), (2,2);
SET GLOBAL debug_dbug = "+d,wsrep_append_foreign_key_error";
--error ER_NO_REFERENCED_ROW_2
INSERT INTO child4 VALUES (1,1,1), (2,2,2);
SET GLOBAL debug_dbug = "";
INSERT INTO child4 VALUES (1,1,1), (2,2,2);

--connection node_2
DELETE FROM grandparent WHERE id = 1;
UPDATE grandparent SET id = 5 where id = 2;

--connection node_1
select * from child;
select * from child2;
select * from child3;
select * from child4;
select * from parent;
select * from grandparent;

--connection node_2
select * from child;
select * from child2;
select * from child3;
select * from child4;
select * from parent;
select * from grandparent;

drop table child, child2, child3, child4, parent, grandparent;
